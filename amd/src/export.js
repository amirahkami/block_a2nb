define(['jquery', 'core/notification'], function($, Notification) {
    'use strict';

    /* global loadPyodide */

    /**
     * Loads Pyodide and the nbformat package using micropip.
     * Caches the Pyodide instance in `window.pyodide`.
     *
     * @returns {Promise<Object>} The loaded Pyodide instance.
     */
    async function loadPyodideAndPackages() {
        if (!window.pyodide) {
            Notification.addNotification({
                message: 'Loading in browser Python environment...',
                type: 'info'
            });

            window.pyodide = await loadPyodide({
                indexURL: "https://cdn.jsdelivr.net/pyodide/v0.25.1/full/"
            });

            await window.pyodide.loadPackage("micropip");

            await window.pyodide.runPythonAsync(`
                import micropip
                await micropip.install("nbformat")
            `);
        }

        return window.pyodide;
    }

    /**
     * Generates a Jupyter Notebook (.ipynb).
     * If all <pre> blocks share the same language (language-* class),
     * creates a single file; otherwise, creates one file per language.
     * @param {string} name
     * @param {string} description
     * @param {string} instructions (HTML)
     */
    async function generateNotebook(name, description, instructions) {
        const pyodide = await loadPyodideAndPackages();

        // Clean up name for filename
        const safeName = String(name)
            .replace(/[^\w\s-]/g, '') // Remove symbols
            .replace(/\s+/g, '_');    // Spaces to underscores

        // --- Parse instructions HTML and group code blocks by language ---
        const temp = document.createElement('div');
        temp.innerHTML = instructions || '';

        // Lang -> array of code strings
        const groups = Object.create(null);

        const getLang = (el) => {
            if (!el || !el.classList)
                {return null;}
            for (const cls of el.classList) {
                if (cls.startsWith('language-'))
                    {return cls.slice('language-'.length);}
                if (cls.startsWith('lang-'))
                    {return cls.slice('lang-'.length);}
            }
            return null;
        };

        temp.querySelectorAll('pre').forEach(pre => {
            const codeEl = pre.querySelector('code');
            const lang = (getLang(codeEl) || getLang(pre) || 'plain').toLowerCase();
            const code = (pre.textContent || '').trim();
            if (!code)
                {return;}
            (groups[lang] ||= []).push(code);
            pre.remove();
        });

        const cleanedInstructions = temp.innerHTML;
        const langs = Object.keys(groups);

        if (langs.length === 0) {
            Notification.alert('No <pre> code blocks found.');
            return;
        }

        // Helper to build the Python that creates the notebook from a JSON payload
        const buildPython = (payloadJson) => `
import nbformat as nbf, json
d = json.loads(r'''${payloadJson}''')

nb = nbf.v4.new_notebook()
cells = []
cells.append(nbf.v4.new_markdown_cell("### Assignment: " + d["name"] + "\\n> This Notebook is generated by A2NB Moodle plugin."))
cells.append(nbf.v4.new_markdown_cell("#### Description:\\n" + d["description"]))
cells.append(nbf.v4.new_markdown_cell("#### Instructions:\\n" + d["instructionsHtml"]))

for code in d["codes"]:
    cells.append(nbf.v4.new_code_cell(code))

nb.cells = cells
nb_str = nbf.writes(nb)
nb_str
`;

        // Create one or multiple notebooks depending on number of languages
        if (langs.length === 1) {
            const onlyLang = langs[0];
            const payload = {
                name, description,
                instructionsHtml: cleanedInstructions,
                codes: groups[onlyLang]
            };

            try {
                const notebookStr = await pyodide.runPythonAsync(buildPython(JSON.stringify(payload)));
                const blob = new Blob([notebookStr], { type: 'application/json' });
                const link = document.createElement('a');
                link.href = URL.createObjectURL(blob);
                link.download = `${safeName}.ipynb`;
                document.body.appendChild(link);
                link.click();
                URL.revokeObjectURL(link.href);
                document.body.removeChild(link);
            } catch (error) {
                Notification.exception(error);
            }
        } else {
            for (const lang of langs) {
                const payload = {
                    name, description,
                    instructionsHtml: cleanedInstructions,
                    codes: groups[lang]
                };

                try {
                    const notebookStr = await pyodide.runPythonAsync(buildPython(JSON.stringify(payload)));
                    const blob = new Blob([notebookStr], { type: 'application/json' });
                    const link = document.createElement('a');
                    link.href = URL.createObjectURL(blob);
                    const suffix = lang.replace(/[^a-z0-9_+-]/gi, '');
                    link.download = `${safeName}_${suffix}.ipynb`;
                    document.body.appendChild(link);
                    link.click();
                    URL.revokeObjectURL(link.href);
                    document.body.removeChild(link);
                } catch (error) {
                    Notification.exception(error);
                    return; // Stop on first failure
                }
            }
        }
    }

    /**
     * Initializes event delegation for all buttons with `.create-ipynb`.
     * Reads assignment name from `data-assignment` attribute.
     */
    function init() {
        $(document).on('click', '.create-ipynb', function () {
            const name = $(this).data('name');
            const description = $(this).data('description');
            const instructions = $(this).data('instructions');

            if (!name || !description || !instructions) {
                Notification.alert('Assignment infos not fully provided.');
                return;
            }

            Notification.addNotification({
                message: `Generating notebook for "${name}"...`,
                type: 'info'
            });

            generateNotebook(name, description, instructions);
        });
    }

    return {
        init: init
    };
});
