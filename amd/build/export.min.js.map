{"version":3,"file":"export.min.js","sources":["../src/export.js"],"sourcesContent":["define(['jquery', 'core/notification'], function($, Notification) {\n    'use strict';\n\n    /* global loadPyodide */\n\n    /**\n     * Loads Pyodide and the nbformat package using micropip.\n     * Caches the Pyodide instance in `window.pyodide`.\n     *\n     * @returns {Promise<Object>} The loaded Pyodide instance.\n     */\n    async function loadPyodideAndPackages() {\n        if (!window.pyodide) {\n            Notification.addNotification({\n                message: 'Loading in browser Python environment...',\n                type: 'info'\n            });\n\n            window.pyodide = await loadPyodide({\n                indexURL: \"https://cdn.jsdelivr.net/pyodide/v0.25.1/full/\"\n            });\n\n            await window.pyodide.loadPackage(\"micropip\");\n\n            await window.pyodide.runPythonAsync(`\n                import micropip\n                await micropip.install(\"nbformat\")\n            `);\n        }\n\n        return window.pyodide;\n    }\n\n    /**\n     * Generates a Jupyter Notebook (.ipynb) for a given assignment name,\n     * using nbformat from Python inside Pyodide.\n     * @param {string} name\n     * @param {string} description\n     * @param {string} instructions\n     */\n    async function generateNotebook(name, description, instructions) {\n        const pyodide = await loadPyodideAndPackages();\n\n        // Clean up name for filename\n        const safeName = name\n            .replace(/[^\\w\\s-]/g, '') // Remove symbols\n            .replace(/\\s+/g, '_'); // Spaces to underscores\n\n\n        // placeholder and extract code block\n        const temp = document.createElement('div');\n        temp.innerHTML = instructions || '';\n        const codeBlocks = [];\n\n        temp.querySelectorAll('pre').forEach(pre => {\n            const code = (pre.textContent || '').trim();\n            if (code) { codeBlocks.push(code); }\n            pre.remove();\n        });\n\n        const cleanedInstructions = temp.innerHTML;\n        const codesJson = JSON.stringify(codeBlocks);\n\n        // Python code to generate notebook using nbformat\n        const pythonCode = `\nimport nbformat as nbf\nimport json\n\nnb = nbf.v4.new_notebook()\ncells = []\n\ncells.append(nbf.v4.new_markdown_cell('### Assignment: ${name}\\\\n>This notebook was generated from Moodle A2NB Plugin.'))\ncells.append(nbf.v4.new_markdown_cell('#### Description:\\\\n${description}'))\ncells.append(nbf.v4.new_markdown_cell(\"\"\"#### Instructions:\\\\n${cleanedInstructions}\"\"\"))\n\n\ncodes = json.loads(${JSON.stringify(codesJson)})\nfor code in codes:\n    cells.append(nbf.v4.new_code_cell(code))\n\n\nnb.cells = cells\nnb_str = nbf.writes(nb)\nnb_str\n        `;\n\n        try {\n            const notebookStr = await pyodide.runPythonAsync(pythonCode);\n\n            // Create a downloadable blob\n            const blob = new Blob([notebookStr], { type: 'application/json' });\n            const link = document.createElement('a');\n            link.href = URL.createObjectURL(blob);\n            link.download = `${safeName}.ipynb`;\n            document.body.appendChild(link);\n            link.click();\n            document.body.removeChild(link);\n        } catch (error) {\n            Notification.exception(error);\n        }\n    }\n\n    /**\n     * Initializes event delegation for all buttons with `.create-ipynb`.\n     * Reads assignment name from `data-assignment` attribute.\n     */\n    function init() {\n        $(document).on('click', '.create-ipynb', function () {\n            const name = $(this).data('name');\n            const description = $(this).data('description');\n            const instructions = $(this).data('instructions');\n\n            if (!name || !description || !instructions) {\n                Notification.alert('Assignment infos not fully provided.');\n                return;\n            }\n\n            Notification.addNotification({\n                message: `Generating notebook for \"${name}\"...`,\n                type: 'info'\n            });\n\n            generateNotebook(name, description, instructions);\n        });\n    }\n\n    return {\n        init: init\n    };\n});\n"],"names":["define","$","Notification","generateNotebook","name","description","instructions","pyodide","window","addNotification","message","type","loadPyodide","indexURL","loadPackage","runPythonAsync","loadPyodideAndPackages","safeName","replace","temp","document","createElement","innerHTML","codeBlocks","querySelectorAll","forEach","pre","code","textContent","trim","push","remove","cleanedInstructions","codesJson","JSON","stringify","pythonCode","notebookStr","blob","Blob","link","href","URL","createObjectURL","download","body","appendChild","click","removeChild","error","exception","init","on","this","data","alert"],"mappings":"AAAAA,2BAAO,CAAC,SAAU,sBAAsB,SAASC,EAAGC,6BAwCjCC,iBAAiBC,KAAMC,YAAaC,oBACzCC,sCA7BDC,OAAOD,UACRL,aAAaO,gBAAgB,CACzBC,QAAS,2CACTC,KAAM,SAGVH,OAAOD,cAAgBK,YAAY,CAC/BC,SAAU,yDAGRL,OAAOD,QAAQO,YAAY,kBAE3BN,OAAOD,QAAQQ,eAAgB,wGAMlCP,OAAOD,QAWQS,GAGhBC,SAAWb,KACZc,QAAQ,YAAa,IACrBA,QAAQ,OAAQ,KAIfC,KAAOC,SAASC,cAAc,OACpCF,KAAKG,UAAYhB,cAAgB,SAC3BiB,WAAa,GAEnBJ,KAAKK,iBAAiB,OAAOC,SAAQC,YAC3BC,MAAQD,IAAIE,aAAe,IAAIC,OACjCF,MAAQJ,WAAWO,KAAKH,MAC5BD,IAAIK,kBAGFC,oBAAsBb,KAAKG,UAC3BW,UAAYC,KAAKC,UAAUZ,YAG3Ba,WAAc,6IAO6BhC,+HACIC,iFACG2B,oDAG3CE,KAAKC,UAAUF,2JAWlBI,kBAAoB9B,QAAQQ,eAAeqB,YAG3CE,KAAO,IAAIC,KAAK,CAACF,aAAc,CAAE1B,KAAM,qBACvC6B,KAAOpB,SAASC,cAAc,KACpCmB,KAAKC,KAAOC,IAAIC,gBAAgBL,MAChCE,KAAKI,SAAY,GAAE3B,iBACnBG,SAASyB,KAAKC,YAAYN,MAC1BA,KAAKO,QACL3B,SAASyB,KAAKG,YAAYR,MAC5B,MAAOS,OACL/C,aAAagD,UAAUD,cA4BxB,CACHE,gBApBAlD,EAAEmB,UAAUgC,GAAG,QAAS,iBAAiB,iBAC/BhD,KAAOH,EAAEoD,MAAMC,KAAK,QACpBjD,YAAcJ,EAAEoD,MAAMC,KAAK,eAC3BhD,aAAeL,EAAEoD,MAAMC,KAAK,gBAE7BlD,MAASC,aAAgBC,cAK9BJ,aAAaO,gBAAgB,CACzBC,QAAU,4BAA2BN,WACrCO,KAAM,SAGVR,iBAAiBC,KAAMC,YAAaC,eAThCJ,aAAaqD,MAAM"}