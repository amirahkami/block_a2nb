{"version":3,"file":"export.min.js","sources":["../src/export.js"],"sourcesContent":["define(['jquery', 'core/notification'], function($, Notification) {\n    'use strict';\n\n    /* global loadPyodide */\n\n    /**\n     * Loads Pyodide and the nbformat package using micropip.\n     * Caches the Pyodide instance in `window.pyodide`.\n     *\n     * @returns {Promise<Object>} The loaded Pyodide instance.\n     */\n    async function loadPyodideAndPackages() {\n        if (!window.pyodide) {\n            Notification.addNotification({\n                message: 'Loading in browser Python environment...',\n                type: 'info'\n            });\n\n            window.pyodide = await loadPyodide({\n                indexURL: \"https://cdn.jsdelivr.net/pyodide/v0.25.1/full/\"\n            });\n\n            await window.pyodide.loadPackage(\"micropip\");\n\n            await window.pyodide.runPythonAsync(`\n                import micropip\n                await micropip.install(\"nbformat\")\n            `);\n        }\n\n        return window.pyodide;\n    }\n\n    /**\n     * Generates a Jupyter Notebook (.ipynb).\n     * If all <pre> blocks share the same language (language-* class),\n     * creates a single file; otherwise, creates one file per language.\n     * @param {string} name\n     * @param {string} description\n     * @param {string} instructions (HTML)\n     */\n    async function generateNotebook(name, description, instructions) {\n        const pyodide = await loadPyodideAndPackages();\n\n        // Clean up name for filename\n        const safeName = String(name)\n            .replace(/[^\\w\\s-]/g, '') // Remove symbols\n            .replace(/\\s+/g, '_');    // Spaces to underscores\n\n        // --- Parse instructions HTML and group code blocks by language ---\n        const temp = document.createElement('div');\n        temp.innerHTML = instructions || '';\n\n        // Lang -> array of code strings\n        const groups = Object.create(null);\n\n        const getLang = (el) => {\n            if (!el || !el.classList)\n                {return null;}\n            for (const cls of el.classList) {\n                if (cls.startsWith('language-'))\n                    {return cls.slice('language-'.length);}\n                if (cls.startsWith('lang-'))\n                    {return cls.slice('lang-'.length);}\n            }\n            return null;\n        };\n\n        temp.querySelectorAll('pre').forEach(pre => {\n            const codeEl = pre.querySelector('code');\n            const lang = (getLang(codeEl) || getLang(pre) || 'plain').toLowerCase();\n            const code = (pre.textContent || '').trim();\n            if (!code)\n                {return;}\n            (groups[lang] ||= []).push(code);\n            pre.remove();\n        });\n\n        const cleanedInstructions = temp.innerHTML;\n        const langs = Object.keys(groups);\n\n        if (langs.length === 0) {\n            Notification.alert('No <pre> code blocks found.');\n            return;\n        }\n\n        // Helper to build the Python that creates the notebook from a JSON payload\n        const buildPython = (payloadJson) => `\nimport nbformat as nbf, json\nd = json.loads(r'''${payloadJson}''')\n\nnb = nbf.v4.new_notebook()\ncells = []\ncells.append(nbf.v4.new_markdown_cell(\"### Assignment: \" + d[\"name\"] + \"\\\\n> This Notebook is generated by A2NB Moodle plugin.\"))\ncells.append(nbf.v4.new_markdown_cell(\"#### Description:\\\\n\" + d[\"description\"]))\ncells.append(nbf.v4.new_markdown_cell(\"#### Instructions:\\\\n\" + d[\"instructionsHtml\"]))\n\nfor code in d[\"codes\"]:\n    cells.append(nbf.v4.new_code_cell(code))\n\nnb.cells = cells\nnb_str = nbf.writes(nb)\nnb_str\n`;\n\n        // Create one or multiple notebooks depending on number of languages\n        if (langs.length === 1) {\n            const onlyLang = langs[0];\n            const payload = {\n                name, description,\n                instructionsHtml: cleanedInstructions,\n                codes: groups[onlyLang]\n            };\n\n            try {\n                const notebookStr = await pyodide.runPythonAsync(buildPython(JSON.stringify(payload)));\n                const blob = new Blob([notebookStr], { type: 'application/json' });\n                const link = document.createElement('a');\n                link.href = URL.createObjectURL(blob);\n                link.download = `${safeName}.ipynb`;\n                document.body.appendChild(link);\n                link.click();\n                URL.revokeObjectURL(link.href);\n                document.body.removeChild(link);\n            } catch (error) {\n                Notification.exception(error);\n            }\n        } else {\n            for (const lang of langs) {\n                const payload = {\n                    name, description,\n                    instructionsHtml: cleanedInstructions,\n                    codes: groups[lang]\n                };\n\n                try {\n                    const notebookStr = await pyodide.runPythonAsync(buildPython(JSON.stringify(payload)));\n                    const blob = new Blob([notebookStr], { type: 'application/json' });\n                    const link = document.createElement('a');\n                    link.href = URL.createObjectURL(blob);\n                    const suffix = lang.replace(/[^a-z0-9_+-]/gi, '');\n                    link.download = `${safeName}_${suffix}.ipynb`;\n                    document.body.appendChild(link);\n                    link.click();\n                    URL.revokeObjectURL(link.href);\n                    document.body.removeChild(link);\n                } catch (error) {\n                    Notification.exception(error);\n                    return; // Stop on first failure\n                }\n            }\n        }\n    }\n\n    /**\n     * Initializes event delegation for all buttons with `.create-ipynb`.\n     * Reads assignment name from `data-assignment` attribute.\n     */\n    function init() {\n        $(document).on('click', '.create-ipynb', function () {\n            const name = $(this).data('name');\n            const description = $(this).data('description');\n            const instructions = $(this).data('instructions');\n\n            if (!name || !description || !instructions) {\n                Notification.alert('Assignment infos not fully provided.');\n                return;\n            }\n\n            Notification.addNotification({\n                message: `Generating notebook for \"${name}\"...`,\n                type: 'info'\n            });\n\n            generateNotebook(name, description, instructions);\n        });\n    }\n\n    return {\n        init: init\n    };\n});\n"],"names":["define","$","Notification","generateNotebook","name","description","instructions","pyodide","window","addNotification","message","type","loadPyodide","indexURL","loadPackage","runPythonAsync","loadPyodideAndPackages","safeName","String","replace","temp","document","createElement","innerHTML","groups","Object","create","getLang","el","classList","cls","startsWith","slice","length","querySelectorAll","forEach","pre","codeEl","querySelector","lang","toLowerCase","code","textContent","trim","push","remove","cleanedInstructions","langs","keys","alert","buildPython","payloadJson","onlyLang","payload","instructionsHtml","codes","notebookStr","JSON","stringify","blob","Blob","link","href","URL","createObjectURL","download","body","appendChild","click","revokeObjectURL","removeChild","error","exception","suffix","init","on","this","data"],"mappings":"AAAAA,2BAAO,CAAC,SAAU,sBAAsB,SAASC,EAAGC,6BAyCjCC,iBAAiBC,KAAMC,YAAaC,oBACzCC,sCA9BDC,OAAOD,UACRL,aAAaO,gBAAgB,CACzBC,QAAS,2CACTC,KAAM,SAGVH,OAAOD,cAAgBK,YAAY,CAC/BC,SAAU,yDAGRL,OAAOD,QAAQO,YAAY,kBAE3BN,OAAOD,QAAQQ,eAAgB,wGAMlCP,OAAOD,QAYQS,GAGhBC,SAAWC,OAAOd,MACnBe,QAAQ,YAAa,IACrBA,QAAQ,OAAQ,KAGfC,KAAOC,SAASC,cAAc,OACpCF,KAAKG,UAAYjB,cAAgB,SAG3BkB,OAASC,OAAOC,OAAO,MAEvBC,QAAWC,SACRA,KAAOA,GAAGC,iBACH,SACP,MAAMC,OAAOF,GAAGC,UAAW,IACxBC,IAAIC,WAAW,oBACPD,IAAIE,MAAM,YAAYC,WAC9BH,IAAIC,WAAW,gBACPD,IAAIE,MAAM,QAAQC,eAE3B,MAGXb,KAAKc,iBAAiB,OAAOC,SAAQC,YAC3BC,OAASD,IAAIE,cAAc,QAC3BC,MAAQZ,QAAQU,SAAWV,QAAQS,MAAQ,SAASI,cACpDC,MAAQL,IAAIM,aAAe,IAAIC,OAChCF,QAEJjB,OAAOe,QAAU,IAAIK,KAAKH,MAC3BL,IAAIS,mBAGFC,oBAAsB1B,KAAKG,UAC3BwB,MAAQtB,OAAOuB,KAAKxB,WAEL,IAAjBuB,MAAMd,mBACN/B,aAAa+C,MAAM,qCAKjBC,YAAeC,aAAiB,sDAEzBA,8eAiBQ,IAAjBJ,MAAMd,OAAc,OACdmB,SAAWL,MAAM,GACjBM,QAAU,CACZjD,KAAAA,KAAMC,YAAAA,YACNiD,iBAAkBR,oBAClBS,MAAO/B,OAAO4B,qBAIRI,kBAAoBjD,QAAQQ,eAAemC,YAAYO,KAAKC,UAAUL,WACtEM,KAAO,IAAIC,KAAK,CAACJ,aAAc,CAAE7C,KAAM,qBACvCkD,KAAOxC,SAASC,cAAc,KACpCuC,KAAKC,KAAOC,IAAIC,gBAAgBL,MAChCE,KAAKI,SAAY,GAAEhD,iBACnBI,SAAS6C,KAAKC,YAAYN,MAC1BA,KAAKO,QACLL,IAAIM,gBAAgBR,KAAKC,MACzBzC,SAAS6C,KAAKI,YAAYT,MAC5B,MAAOU,OACLrE,aAAasE,UAAUD,iBAGtB,MAAMhC,QAAQQ,MAAO,OAChBM,QAAU,CACZjD,KAAAA,KAAMC,YAAAA,YACNiD,iBAAkBR,oBAClBS,MAAO/B,OAAOe,iBAIRiB,kBAAoBjD,QAAQQ,eAAemC,YAAYO,KAAKC,UAAUL,WACtEM,KAAO,IAAIC,KAAK,CAACJ,aAAc,CAAE7C,KAAM,qBACvCkD,KAAOxC,SAASC,cAAc,KACpCuC,KAAKC,KAAOC,IAAIC,gBAAgBL,YAC1Bc,OAASlC,KAAKpB,QAAQ,iBAAkB,IAC9C0C,KAAKI,SAAY,GAAEhD,YAAYwD,eAC/BpD,SAAS6C,KAAKC,YAAYN,MAC1BA,KAAKO,QACLL,IAAIM,gBAAgBR,KAAKC,MACzBzC,SAAS6C,KAAKI,YAAYT,MAC5B,MAAOU,mBACLrE,aAAasE,UAAUD,eA+BhC,CACHG,gBApBAzE,EAAEoB,UAAUsD,GAAG,QAAS,iBAAiB,iBAC/BvE,KAAOH,EAAE2E,MAAMC,KAAK,QACpBxE,YAAcJ,EAAE2E,MAAMC,KAAK,eAC3BvE,aAAeL,EAAE2E,MAAMC,KAAK,gBAE7BzE,MAASC,aAAgBC,cAK9BJ,aAAaO,gBAAgB,CACzBC,QAAU,4BAA2BN,WACrCO,KAAM,SAGVR,iBAAiBC,KAAMC,YAAaC,eAThCJ,aAAa+C,MAAM"}