define("block_a2nb/export",["jquery","core/notification"],(function($,Notification){async function generateNotebook(name,description,instructions){const pyodide=await async function(){return window.pyodide||(Notification.addNotification({message:"Loading in browser Python environment...",type:"info"}),window.pyodide=await loadPyodide({indexURL:"https://cdn.jsdelivr.net/pyodide/v0.25.1/full/"}),await window.pyodide.loadPackage("micropip"),await window.pyodide.runPythonAsync('\n                import micropip\n                await micropip.install("nbformat")\n            ')),window.pyodide}(),safeName=String(name).replace(/[^\w\s-]/g,"").replace(/\s+/g,"_"),temp=document.createElement("div");temp.innerHTML=instructions||"";const groups=Object.create(null),getLang=el=>{if(!el||!el.classList)return null;for(const cls of el.classList){if(cls.startsWith("language-"))return cls.slice("language-".length);if(cls.startsWith("lang-"))return cls.slice("lang-".length)}return null};temp.querySelectorAll("pre").forEach((pre=>{const codeEl=pre.querySelector("code"),lang=(getLang(codeEl)||getLang(pre)||"plain").toLowerCase(),code=(pre.textContent||"").trim();code&&((groups[lang]||=[]).push(code),pre.remove())}));const cleanedInstructions=temp.innerHTML,langs=Object.keys(groups);if(0===langs.length)return void Notification.alert("No <pre> code blocks found.");const buildPython=payloadJson=>`\nimport nbformat as nbf, json\nd = json.loads(r'''${payloadJson}''')\n\nnb = nbf.v4.new_notebook()\ncells = []\ncells.append(nbf.v4.new_markdown_cell("### Assignment: " + d["name"] + "\\n> This Notebook is generated by A2NB Moodle plugin."))\ncells.append(nbf.v4.new_markdown_cell("#### Description:\\n" + d["description"]))\ncells.append(nbf.v4.new_markdown_cell("#### Instructions:\\n" + d["instructionsHtml"]))\n\nfor code in d["codes"]:\n    cells.append(nbf.v4.new_code_cell(code))\n\nnb.cells = cells\nnb_str = nbf.writes(nb)\nnb_str\n`;if(1===langs.length){const onlyLang=langs[0],payload={name:name,description:description,instructionsHtml:cleanedInstructions,codes:groups[onlyLang]};try{const notebookStr=await pyodide.runPythonAsync(buildPython(JSON.stringify(payload))),blob=new Blob([notebookStr],{type:"application/json"}),link=document.createElement("a");link.href=URL.createObjectURL(blob),link.download=`${safeName}.ipynb`,document.body.appendChild(link),link.click(),URL.revokeObjectURL(link.href),document.body.removeChild(link)}catch(error){Notification.exception(error)}}else for(const lang of langs){const payload={name:name,description:description,instructionsHtml:cleanedInstructions,codes:groups[lang]};try{const notebookStr=await pyodide.runPythonAsync(buildPython(JSON.stringify(payload))),blob=new Blob([notebookStr],{type:"application/json"}),link=document.createElement("a");link.href=URL.createObjectURL(blob);const suffix=lang.replace(/[^a-z0-9_+-]/gi,"");link.download=`${safeName}_${suffix}.ipynb`,document.body.appendChild(link),link.click(),URL.revokeObjectURL(link.href),document.body.removeChild(link)}catch(error){return void Notification.exception(error)}}}return{init:function(){$(document).on("click",".create-ipynb",(function(){const name=$(this).data("name"),description=$(this).data("description"),instructions=$(this).data("instructions");name&&description&&instructions?(Notification.addNotification({message:`Generating notebook for "${name}"...`,type:"info"}),generateNotebook(name,description,instructions)):Notification.alert("Assignment infos not fully provided.")}))}}}));

//# sourceMappingURL=export.min.js.map